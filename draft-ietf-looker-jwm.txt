



Network Working Group                                     T. Looker, Ed.
Internet-Draft                                                     Mattr
Intended status: Standards Track                        December 6, 2019
Expires: June 8, 2020


                            JSON Web Message
                          draft-looker-jwm-01

Abstract

   JSON Web Message (JWM) is a flexible way of describing an
   application-level message encoded in JSON that is suitable for
   transfer over a variety of transport protocols.  JWMs through the
   application of JSON Web Signature (JWS) and JSON Web Encryption (JWE)
   can be digitally signed, integrity protected and or achieve
   confidentiality via encryption.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on June 8, 2020.

Copyright Notice

   Copyright (c) 2019 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of




Looker                    Expires June 8, 2020                  [Page 1]

Internet-Draft                     jwm                     December 2019


   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.

Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   3
     1.1.  Notational Conventions  . . . . . . . . . . . . . . . . .   3
     1.2.  Terminology . . . . . . . . . . . . . . . . . . . . . . .   3
   2.  JSON Web Message (JWM) Overview . . . . . . . . . . . . . . .   4
     2.1.  Relationship to JWT . . . . . . . . . . . . . . . . . . .   4
     2.2.  Example JWM . . . . . . . . . . . . . . . . . . . . . . .   5
   3.  JWM Attributes  . . . . . . . . . . . . . . . . . . . . . . .   5
     3.1.  Registered Attribute Names  . . . . . . . . . . . . . . .   6
     3.2.  "id" Attribute  . . . . . . . . . . . . . . . . . . . . .   6
     3.3.  "type" Attribute  . . . . . . . . . . . . . . . . . . . .   6
     3.4.  "body" Attribute  . . . . . . . . . . . . . . . . . . . .   6
     3.5.  "to" Attribute  . . . . . . . . . . . . . . . . . . . . .   6
     3.6.  "from" Attribute  . . . . . . . . . . . . . . . . . . . .   7
     3.7.  "thread_id" Attribute . . . . . . . . . . . . . . . . . .   7
     3.8.  "referent_id" Attribute . . . . . . . . . . . . . . . . .   7
     3.9.  "time_stamp" Attribute  . . . . . . . . . . . . . . . . .   7
     3.10. "expiry" Attribute  . . . . . . . . . . . . . . . . . . .   7
     3.11. "reply_url" Attribute . . . . . . . . . . . . . . . . . .   7
     3.12. "reply_to" Attribute  . . . . . . . . . . . . . . . . . .   7
     3.13. Public Attribute Names  . . . . . . . . . . . . . . . . .   8
     3.14. Private Attribute Names . . . . . . . . . . . . . . . . .   8
   4.  JOSE Header . . . . . . . . . . . . . . . . . . . . . . . . .   8
     4.1.  "typ" (Type) Header Parameter . . . . . . . . . . . . . .   8
     4.2.  "cty" (Content Type) Header Parameter . . . . . . . . . .   9
     4.3.  Replicating Attributes as Header Parameters . . . . . . .   9
   5.  Unsecured JWMs  . . . . . . . . . . . . . . . . . . . . . . .   9
     5.1.  Example Unsecured JWM . . . . . . . . . . . . . . . . . .  10
   6.  Creating and Validating JWMs  . . . . . . . . . . . . . . . .  10
     6.1.  Creating a JWM  . . . . . . . . . . . . . . . . . . . . .  10
     6.2.  Validating a JWM  . . . . . . . . . . . . . . . . . . . .  11
     6.3.  String Comparison Rules . . . . . . . . . . . . . . . . .  13
   7.  Implementation Requirements . . . . . . . . . . . . . . . . .  13
   8.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .  14
     8.1.  Registration Template . . . . . . . . . . . . . . . . . .  14
       8.1.1.  Attribute Name: . . . . . . . . . . . . . . . . . . .  14
       8.1.2.  Attribute Description . . . . . . . . . . . . . . . .  14
       8.1.3.  Change Controller . . . . . . . . . . . . . . . . . .  14
       8.1.4.  Specification Document(s) . . . . . . . . . . . . . .  14
       8.1.5.  Initial Registry Contents . . . . . . . . . . . . . .  14
   9.  Media Type Registration . . . . . . . . . . . . . . . . . . .  15
     9.1.  Registry Contents . . . . . . . . . . . . . . . . . . . .  16
   10. Security Considerations . . . . . . . . . . . . . . . . . . .  16
     10.1.  Trust Decisions  . . . . . . . . . . . . . . . . . . . .  16



Looker                    Expires June 8, 2020                  [Page 2]

Internet-Draft                     jwm                     December 2019


     10.2.  Signing and Encryption Order . . . . . . . . . . . . . .  16
   11. Privacy Considerations  . . . . . . . . . . . . . . . . . . .  17
   12. Acknowledgements  . . . . . . . . . . . . . . . . . . . . . .  17
   13. References  . . . . . . . . . . . . . . . . . . . . . . . . .  17
     13.1.  Normative References . . . . . . . . . . . . . . . . . .  17
     13.2.  URIs . . . . . . . . . . . . . . . . . . . . . . . . . .  18
   Author's Address  . . . . . . . . . . . . . . . . . . . . . . . .  18

1.  Introduction

   JSON Web Message (JWM) is a flexible way of describing an
   application-level message encoded in JSON that is suitable for
   transfer over a variety of transport protocols.  JWMs through the
   application of JSON Web Signature (JWS) and JSON Web Encryption (JWE)
   can be digitally signed, integrity protected and or achieve
   confidentiality via encryption.  JWMs are inspired by JWTs [RFC7519],
   more details about this relationship is documented in Section 2.1.

1.1.  Notational Conventions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in BCP
   14 RFC 2119 [RFC2119] RFC 8174 [RFC8174] when, and only when, they
   appear in all capitals, as shown here.

1.2.  Terminology

   The terms "JSON Web Signature (JWS)", "Base64url Encoding", "Header
   Parameter", "JOSE Header", "JWS Payload", "JWS Signature", "JWS
   Compact Serialization" and "JWS JSON Serialization" are defined by
   the JWS specification [RFC7515].

   The terms "JSON Web Encryption (JWE)", "JWE Compact Serialization"
   and "JWE JSON Serialization" are defined by the JWE specification
   [RFC7516].

   The terms "StringOrURI", "NumericDate" are defined by the JWT
   specification [RFC7519].

   The following terms are defined by this specification:

   Attribute  A piece of information contained inside a message sent
      from a sender intended for a recipient or recipients.  An
      attribute is represented as a name/value pair consisting of an
      Attribute Name and an Attribute Value.





Looker                    Expires June 8, 2020                  [Page 3]

Internet-Draft                     jwm                     December 2019


   Attribute Name  The name portion of an attribute representation.  An
      attribute name is always a string.

   Attribute Value  The value portion of an attribute representation.
      An attribute value can be any JSON value.

   Nested JWM  A JWM in which nested signing and/or encryption are
      employed.  In Nested JWMs, a JWM is used as the payload or
      plaintext value of an enclosing JWS or JWE structure,
      respectively.

   Unsecured JWM  A JWM whose attributes are not integrity protected or
      encrypted.

2.  JSON Web Message (JWM) Overview

2.1.  Relationship to JWT

   JWMs conceptually share many parallels to JWTs, these similarities
   can be summarized in the following way.

   o  A JWM contains a JSON based payload comprised of JWM attributes,
      where public attributes are defined in a IANA registry, this is
      conceptually parallel to JWT claims and the JWT claims IANA
      registry.

   o  A JWM leverages JSON Web Message (JWS) and JSON Web Encryption
      (JWE) to achieve digital signing, integrity protection and or
      confidentiality via encryption over the JWM attribute set when
      required.

   JWMs also deviate in important ways from JWTs which prevents using
   the JWT specification directly to achieve the functionality provided
   by a JWM.

   o  JWTs due to the requirement of them being compact in nature,
      require the usage of compact serialization for both JWS and JWE
      representations.  This compact serialization requirement for JWE
      limits JWTs to only being able to encrypt a payload to one
      recipient.  Whereas JWMs do not require the use of compact
      serialization of JWE, instead they permit the JSON based
      serialization of JWE, which allows for a JWM to be prepared for
      multiple recipients.

   o  The intent of a JWM is different to a JWT.  A JWM is about a
      sender creating a message composed of attributes that are destined
      for a recipient or recipients.  Whereas a JWT is about an issuer
      expressing claims about a subject to an audience.  This difference



Looker                    Expires June 8, 2020                  [Page 4]

Internet-Draft                     jwm                     December 2019


      in language means a meaningful separation of the terminology is
      required to limit confusion for specification implementers.

   In the spirit of specification re-use and promoting ease of
   understanding, this specifications structure is inspired by JWT [1].

2.2.  Example JWM

   The following example JOSE Header declares that the encoded object is
   a JWM, and the JWM is a JWS that is MACed using the HMAC SHA-256
   algorithm:

   //TODO change this example to not use an HMAC signature

   "json {"typ":"JWM", "alg":"HS256"} "

   The following is an example of a JWM Attributes Set:

   "json { "id": "urn:uuid:ef5a7369-f0b9-4143-a49d-2b9c7ee51117",
   "type": "hello-world-message-type", "thread_id": "urn:uuid:66c61afc-
   037b-4229-ace4-5ec4d788903e", "to": [ "urn:uuid:a62237f0-7c4c-
   4787-aeb7-eaf7fd741e4d" ], "from": "urn:uuid:8abdf5fb-621e-
   4cf5-a595-071bc2c91d82", "expiry": 1516239022, "time_stamp":
   1516269022, "body": { "message": "Hello world!" } } "

   //TODO complete this example

3.  JWM Attributes

   The JWM Attributes Set represents a JSON object whose members are the
   attributes conveyed by the JWM.  The Attribute Names within a JWM
   Attributes Set MUST be unique; JWM parsers MUST either reject JWMs
   with duplicate Attribute Names or use a JSON parser that returns only
   the lexically last duplicate member name, as specified in
   Section 15.12 ("The JSON Object") of ECMAScript 5.1 [ECMAScript].

   The set of attributes that a JWM must contain to be considered valid
   is context dependent and is outside the scope of this specification.
   Specific applications of JWMs will require implementations to
   understand and process some attributes in particular ways.  However,
   in the absence of such requirements, all attributes that are not
   understood by implementations MUST be ignored.

   There are three classes of JWM Attribute Names: Registered Attribute
   Names, Public Attribute Names, and Private Attribute Names.






Looker                    Expires June 8, 2020                  [Page 5]

Internet-Draft                     jwm                     December 2019


3.1.  Registered Attribute Names

   The following Attribute Names are registered in the IANA "JSON Web
   Message Attributes" registry established by Section 8.  None of the
   attributes defined below are intended to be mandatory to use or
   implement in all cases, but rather they provide a starting point for
   a set of useful, interoperable attributes.  Applications using JWMs
   should define which specific Attributes they use and when they are
   required or optional.

3.2.  "id" Attribute

   The "id" attribute is used to define a unique identifier for a JWM.
   The "id" attribute value MUST be assigned in a manner that ensures
   that there is a negligible probability that the same value will be
   accidentally assigned to another JWM.  The processing of this
   attribute is generally application specific.  The "id" attribute
   value is a case-sensitive string containing a StringOrURI value.  Use
   of this attribute is OPTIONAL.

3.3.  "type" Attribute

   The "type" attribute is used to define the type of the message.  The
   processing of this attribute is generally application specific.  The
   "type" attribute value is a case-sensitive string containing a
   StringOrURI value.  The "type" attribute value can be used by
   applications to inform the structure and content of the "message
   body" and indicate the presence of other JWM attributes.  Use of this
   attribute is OPTIONAL.

3.4.  "body" Attribute

   The "body" attribute is used to define a location for application
   level message content.  The "body" attribute value is a JSON object
   conforming to RFC 7159 [RFC7159].  The processing of this attribute
   is generally application specific.  Use of this attribute is
   OPTIONAL.

3.5.  "to" Attribute

   The "to" attribute is used to define the intended recipients of the
   JWM.  The "to" attribute value is an array of case-sensitive strings
   each containing a StringOrURI value.  The processing of this
   attribute is generally application specific.  Use of this attribute
   is OPTIONAL.






Looker                    Expires June 8, 2020                  [Page 6]

Internet-Draft                     jwm                     December 2019


3.6.  "from" Attribute

   The "from" attribute is used to define the sender of the JWM.  The
   "from" attribute value is a case-sensitive string containing a
   StringOrURI value.  The processing of this attribute is generally
   application specific.  Use of this attribute is OPTIONAL.

3.7.  "thread_id" Attribute

   The "thread_id" attribute is used to associate the JWM to a group of
   related messages often refered to as a thread.  The "thread_id"
   attribute value is a case-sensitive string containing a StringOrURI
   value.  The processing of this attribute is generally application
   specific.  Use of this attribute is OPTIONAL.

3.8.  "referent_id" Attribute

   The "referent_id" attribute is used to associated the JWM directly to
   another JWM.  The "referent_id" attribute value is a case-sensitive
   string containing a StringOrURI value.  The processing of this
   attribute is generally application specific.  Use of this attribute
   is OPTIONAL.

3.9.  "time_stamp" Attribute

   The "time_stamp" attribute is used to define the time in which the
   message was created.  The "time_stamp" attributes value MUST be a
   number containing a NumericDate value.  Use of this attribute is
   OPTIONAL.

3.10.  "expiry" Attribute

   The "expiry" attribute is used to define the lifespan or lifetime of
   the JWM.  The "expiry" attributes value MUST be a number containing a
   NumericDate value.  Use of this attribute is OPTIONAL.

3.11.  "reply_url" Attribute

   The "reply_url" attribute is used to define a url to which a response
   to the message can be sent.  The "reply_url" attribute value is a
   case-sensitive string containing a StringOrURI value.  Use of this
   attribute is OPTIONAL.

3.12.  "reply_to" Attribute

   The "reply_to" attribute is used to define who a response to the
   message should be sent to.  The "reply_to" attribute value is a case-
   sensitive string containing a StringOrURI value OR an array of case-



Looker                    Expires June 8, 2020                  [Page 7]

Internet-Draft                     jwm                     December 2019


   sensitive strings containing StringOrURI values.  Use of this
   attribute is OPTIONAL.

3.13.  Public Attribute Names

   Attribute Names can be defined at will by those using JWMs.  However,
   in order to prevent collisions, any new Attribute Name should either
   be registered in the IANA "JSON Web Message Attributes" registry
   established by Section 10.1 or be a Public Name: a value that
   contains a Collision-Resistant Name.  In each case, the definer of
   the name or value needs to take reasonable precautions to make sure
   they are in control of the part of the namespace they use to define
   the Attribute Name.

3.14.  Private Attribute Names

   A producer and consumer of a JWM MAY agree to use Attribute Names
   that are Private Names: names that are not Registered Attribute Names
   Section 3.1 or Public Attribute Names Section 3.13.  Unlike Public
   Attribute Names, Private Attribute Names are subject to collision and
   should be used with caution.

4.  JOSE Header

   For a JWM object, the members of the JSON object represented by the
   JOSE Header describe the cryptographic operations applied to the JWM
   and optionally, additional properties of the JWM.  Depending upon
   whether the JWM is a JWS or JWE, the corresponding rules for the JOSE
   Header values apply.

   This specification further specifies the use of the following Header
   Parameters in both the cases where the JWM is a JWS and where it is a
   JWE.

4.1.  "typ" (Type) Header Parameter

   The "typ" (type) Header Parameter defined by [RFC7515] and [RFC7516]
   is used by JWM applications to declare the media type
   [IANA.MediaTypes] of this complete JWM.  This is intended for use by
   the JWM application when values that are not JWMs could also be
   present in an application data structure that can contain a JWM
   object; the application can use this value to disambiguate among the
   different kinds of objects that might be present.  It will typically
   not be used by applications when it is already known that the object
   is a JWM.  This parameter is ignored by JWM implementations; any
   processing of this parameter is performed by the JWM application.  If
   present, it is RECOMMENDED that its value be "JWM" to indicate that
   this object is a JWM.  While media type names are not case sensitive,



Looker                    Expires June 8, 2020                  [Page 8]

Internet-Draft                     jwm                     December 2019


   it is RECOMMENDED that "JWM" always be spelled using uppercase
   characters for compatibility with legacy implementations.  Use of
   this Header Parameter is OPTIONAL.

4.2.  "cty" (Content Type) Header Parameter

   The "cty" (content type) Header Parameter defined by [RFC7515] and
   [RFC7516] is used by this specification to convey structural
   information about the JWM.

   In the normal case in which nested signing or encryption operations
   are not employed, the use of this Header Parameter is NOT
   RECOMMENDED.  In the case that nested signing or encryption is
   employed, this Header Parameter MUST be present; in this case, the
   value MUST be "JWM", to indicate that a Nested JWM is carried in this
   JWM.  While media type names are not case sensitive, it is
   RECOMMENDED that "JWM" always be spelled using uppercase characters
   for compatibility with legacy implementations.  See Appendix A.2 for
   an example of a Nested JWM.

4.3.  Replicating Attributes as Header Parameters

   As is also the case with JWTs, in some applications using encrypted
   JWMs, it is useful to have an unencrypted representation of some
   attributes.  This might be used, for instance, in application
   processing rules to determine whether and how to process the JWM
   before it is decrypted.

   This specification allows Attributes present in the JWM Attributes
   Set to be replicated as JOSE Header Parameters in a JWM that is a
   JWE, as needed by the application.  If such replicated attributes are
   present, the application receiving them SHOULD verify that their
   values are identical, unless the application defines other specific
   processing rules for these attributes.  It is the responsibility of
   the application to ensure that only attributes that are safe to be
   transmitted in an unencrypted manner are replicated as JOSE Header
   Parameter values in the JWM.

5.  Unsecured JWMs

   To support use cases in which the JWM content is secured by a means
   other than a signature and/or encryption contained within the JWM
   (such as a signature on a data structure containing the JWM), JWMs
   MAY also be created without a signature or encryption.  An Unsecured
   JWM is a JWS using the "alg" Header Parameter value "none" and with
   the empty string for its JWS Signature value, as defined in the JWA
   specification [RFC7518]; it is an Unsecured JWS with the JWM
   Attributes Set as its JWS Payload.



Looker                    Expires June 8, 2020                  [Page 9]

Internet-Draft                     jwm                     December 2019


5.1.  Example Unsecured JWM

   The following example JOSE Header declares that the encoded object is
   an Unsecured JWM:

   {"alg":"none"}

   Base64url encoding the octets of the UTF-8 representation of the JOSE
   Header yields this encoded JOSE Header value:

   eyJhbGciOiJub25lIn0

   The following is an example of a JWM Attributes Set:

   {"iss":"joe", "exp":1300819380, "http://example.com/is_root":true}
   //TODO change

   Base64url encoding the octets of the UTF-8 representation of the JWM
   Attributes Set yields this encoded JWS Payload (with line breaks for
   display purposes only):

   eyJpc3MiOiJqb2UiLA0KICJleHAiOjEzMDA4MTkzODAsDQogImh0dHA6Ly9leGFt
   cGxlLmNvbS9pc19yb290Ijp0cnVlfQ //TODO change

   The encoded JWS Signature is the empty string.

   Concatenating these encoded parts in this order with period ('.')
   characters between the parts yields this complete JWM (with line
   breaks for display purposes only):

   eyJhbGciOiJub25lIn0 .
   eyJpc3MiOiJqb2UiLA0KICJleHAiOjEzMDA4MTkzODAsDQogImh0dHA6Ly9leGFt
   cGxlLmNvbS9pc19yb290Ijp0cnVlfQ .

6.  Creating and Validating JWMs

6.1.  Creating a JWM

   To create a JWM, the following steps are performed.  The order of the
   steps is not significant in cases where there are no dependencies
   between the inputs and outputs of the steps.

   1.  Create a JWM Attribute Set containing the desired attributes.
       Note that whitespace is explicitly allowed in the representation
       and no canonicalization need be performed before encoding.

   2.  Let the Message be the octets of the UTF-8 representation of the
       JWM Attributes Set.



Looker                    Expires June 8, 2020                 [Page 10]

Internet-Draft                     jwm                     December 2019


   3.  Create a JOSE Header containing the desired set of Header
       Parameters.  The JWM MUST conform to either the JWS [RFC7515] or
       JWE [RFC7516] specification.  Note that whitespace is explicitly
       allowed in the representation and no canonicalization need be
       performed before encoding.  THE JOSE "typ" header must be set to
       "JWM".

   4.  Depending upon whether the JWM is a JWS or JWE, there are two
       cases:

   o  If the JWM is a JWS, create a JWS using the JWM Attribute Set as
      the JWS Payload; all steps specified in JWS [RFC7515] for creating
      a JWS MUST be followed.  If the resulting JWS features only a
      single signature, it can then optionally be formated into JWS
      compact serialization format allowing the message to be URL safe.
      If however, the resulting JWS features multiple signatures and URL
      safety is required, the entire JWS in JSON serialization format
      MUST be encoded to base64url format.  Otherwise the output format
      for the JWS MUST be JWS JSON serialization format.

   o  Else, if the JWM is a JWE, create a JWE using the JWM Attribute
      Set as the plaintext for the JWE; all steps specified in JWE
      [RFC7516] for creating a JWE MUST be followed.  If the resulting
      JWE features only a single recipient, it can then optionally be
      formated into a JWE compact serialization format allowing the
      message to be URL safe.  If however, the resulting JWE features
      multiple recipients and URL safety is required the entire JWE in
      JSON serialization format MUST be encoded to base64url format.
      Otherwise the output format for the JWE MUST be JWE JSON
      serialization format.

   1.  If a nested JWM is desired, let the Message be the JWS or JWE,
       and return to Step 3, using a "cty" (content type) value of "JWM"
       in the new JOSE Header created in that step.

   2.  Otherwise, let the resulting JWM be the JWS or JWE.

6.2.  Validating a JWM

   When validating a JWM, the following steps are performed.  The order
   of the steps is not significant in cases where there are no
   dependencies between the inputs and outputs of the steps.  If any of
   the listed steps fail, then the JWM MUST be rejected; that is,
   treated by the application as an invalid input.

   1.  If the JWM is a valid base64 string containing at least one
       period ('.') character.




Looker                    Expires June 8, 2020                 [Page 11]

Internet-Draft                     jwm                     December 2019


       1.  Let the Encoded JOSE Header be the portion of the JWM before
           the first period ('.') character.

       2.  Base64url decode the Encoded JOSE Header following the
           restriction that no line breaks, whitespace, or other
           additional characters have been used.

       3.  Verify that the resulting octet sequence is a UTF-8-encoded
           representation of a completely valid JSON object conforming
           to RFC 7159 [RFC7159]; let the JOSE Header be this JSON
           object.

   2.  Else, if the JWM is a valid base64 string containing no period
       ('.') characters.

       1.  Let the Encoded JWS or JWE be the entire base64 string.

       2.  Base64url decode the Encoded JWS or JWE following the
           restriction that no line breaks, whitespace, or other
           additional characters have been used.

       3.  Verify that the resulting octet sequence is a UTF-8-encoded
           representation of a completely valid JSON object conforming
           to RFC 7159 [RFC7159]; let the JWS or JWE be this JSON
           object.

   3.  Else, if the JWM is a UTF-8-encoded representation of a
       completely valid JSON object conforming to RFC 7159 [RFC7159];
       let the JWS or JWE be this JSON object.

   4.  Verify that the resulting JOSE Header includes only parameters
       and values whose syntax and semantics are both understood and
       supported or that are specified as being ignored when not
       understood.

   5.  Determine whether the JWM is a JWS or a JWE using any of the
       methods described in Section 9 of [RFC7516].

   6.  Depending upon whether the JWM is a JWS or JWE, there are two
       cases:

       *  If the JWM is a JWS, follow the steps specified in [RFC7515]
          for validating a JWS.  Let the Message be the result of
          base64url decoding the JWS Payload.

       *  Else, if the JWM is a JWE, follow the steps specified in
          [RFC7516] for validating a JWE.  Let the Message be the
          resulting plaintext.



Looker                    Expires June 8, 2020                 [Page 12]

Internet-Draft                     jwm                     December 2019


   7.  If the JOSE Header contains a "cty" (content type) value of
       "JWM", then the Message is a JWM that was the subject of nested
       signing or encryption operations.  In this case, return to Step
       1, using the Message as the JWM.

   8.  Otherwise, base64url decode the Message following the restriction
       that no line breaks, whitespace, or other additional characters
       have been used.

   9.  Verify that the resulting octet sequence is a UTF-8-encoded
       representation of a completely valid JSON object conforming to
       RFC 7159 [RFC7159]; let the JWM Attributes Set be this JSON
       object.

   Finally, note that it is an application decision which algorithms may
   be used in a given context.  Even if a JWM can be successfully
   validated, unless the algorithms used in the JWM are acceptable to
   the application, it SHOULD reject the JWM.

6.3.  String Comparison Rules

   These rules are identical to those outlined in Section 7.3 of
   [RFC7519].

7.  Implementation Requirements

   This section defines which algorithms and features of this
   specification are mandatory to implement.  Applications using this
   specification can impose additional requirements upon implementations
   that they use.

   Supported for digitally signed JWMs using JWS is REQUIRED.  Of the
   signature and MAC algorithms specified in JSON Web Algorithms
   [RFC7518], only ECDSA using the P-256 curve and SHA-256 hash
   algorithm ("ES256") and "none" MUST be implemented by conforming JWM
   implementations.  It is RECOMMENDED that implementations also support
   ECDSA using the P-521 curve and the SHA-512 hash algorithm ("ES512")
   and EdDSA using the Ed25519 curve and SHA-512 hash algorithm.
   Support for other algorithms and key sizes is OPTIONAL.

   Support for encrypted JWMs using JWE is also REQUIRED.  Of the
   encryption algorithms specified in [RFC7518], using Elliptic Curve
   Diffie-Hellman Ephemeral Static (ECDH-ES) to agree upon a key and
   using this key to to perform key wrapping of a Content Encryption Key
   ("ECDH-ES+A128KW" and "ECDH-ES+A256KW") MUST be supported.  With
   regards to content encryption, AES in Galois/Counter Mode (GCM) with
   128-bit and 256-bit keys ("A128GCM" and "A256GCM") MUST also be
   supported.



Looker                    Expires June 8, 2020                 [Page 13]

Internet-Draft                     jwm                     December 2019


   Support for Nested JWMs is also REQUIRED.

8.  IANA Considerations

8.1.  Registration Template

8.1.1.  Attribute Name:

   The name requested (e.g., "type").  Because a core goal of this
   specification is for the resulting representations to be compact, it
   is RECOMMENDED that the name be short - that is, not to exceed 8
   characters without a compelling reason to do so.  This name is case
   sensitive.  Names may not match other registered names in a case-
   insensitive manner unless the Designated Experts state that there is
   a compelling reason to allow an exception.

8.1.2.  Attribute Description

   Brief description of the claim (e.g., "Message Type").

8.1.3.  Change Controller

   For Standards Track RFCs, list the "IESG".  For others, give the name
   of the responsible party.  Other details (e.g., postal address, email
   address, home page URI) may also be included.

8.1.4.  Specification Document(s)

   Reference to the document or documents that specify the parameter,
   preferably including URIs that can be used to retrieve copies of the
   documents.  An indication of the relevant sections may also be
   included but is not required.

8.1.5.  Initial Registry Contents

   o Attribute Name: "id"
   o Attribute Description: Message ID
   o Change Controller:
   o Specification Document(s):

   o Attribute Name: "type"
   o Attribute Description: Message Type
   o Change Controller:
   o Specification Document(s):

   o Attribute Name: "body"
   o Attribute Description: Message Body
   o Change Controller:



Looker                    Expires June 8, 2020                 [Page 14]

Internet-Draft                     jwm                     December 2019


   o Specification Document(s):

   o Attribute Name: "to"
   o Attribute Description: Message Recipients
   o Change Controller:
   o Specification Document(s):

   o Attribute Name: "from"
   o Attribute Description: Message From
   o Change Controller:
   o Specification Document(s):

   o Attribute Name: "thread_id"
   o Attribute Description: Message Thread ID
   o Change Controller:
   o Specification Document(s):

   o Attribute Name: "referent_id"
   o Attribute Description: Message Referent ID
   o Change Controller:
   o Specification Document(s):

   o Attribute Name: "time_stamp"
   o Attribute Description: Message Timestamp
   o Change Controller:
   o Specification Document(s):

   o Attribute Name: "expiry"
   o Attribute Description: Message Expiry
   o Change Controller:
   o Specification Document(s):

   o Attribute Name: "reply_url"
   o Attribute Description: Message Reply URL
   o Change Controller:
   o Specification Document(s):

   o Attribute Name: "reply_to"
   o Attribute Description: Message Reply To
   o Change Controller:
   o Specification Document(s):

9.  Media Type Registration








Looker                    Expires June 8, 2020                 [Page 15]

Internet-Draft                     jwm                     December 2019


9.1.  Registry Contents

10.  Security Considerations

   All of the security issues that are pertinent to any cryptographic
   application must be addressed by JWM/JWS/JWE/JWK agents.  Among these
   issues are protecting the user's asymmetric private and symmetric
   secret keys and employing countermeasures to various attacks.

   All the security considerations in the JWS specification also apply
   to JWM, as do the JWE security considerations when encryption is
   employed.  In particular, Sections 10.12 ("JSON Security
   Considerations") and 10.13 ("Unicode Comparison Security
   Considerations") of [RFC7515] apply equally to the JWM Attributes Set
   in the same manner that they do to the JOSE Header.

10.1.  Trust Decisions

   The contents of a JWM cannot be relied upon in a trust decision
   unless its contents have been cryptographically secured and bound to
   the context necessary for the trust decision.  In particular, the
   key(s) used to sign and/or encrypt the JWM will typically need to
   verifiably be under the control of the party identified by the
   associated cryptographic operation.

   //TODO the text from the JWT spec I disagreed with, you dont have an
   issuer //you can verify if it is a JWE

10.2.  Signing and Encryption Order

   While syntactically the signing and encryption operations for Nested
   JWMs may be applied in any order, if both signing and encryption are
   necessary, normally producers should sign the message and then
   encrypt the result (thus encrypting the signature).  This prevents
   attacks in which the signature is stripped, leaving just an encrypted
   message, as well as providing privacy for the signer.  Furthermore,
   signatures over encrypted text are not considered valid in many
   jurisdictions.

   Note that potential concerns about security issues related to the
   order of signing and encryption operations are already addressed by
   the underlying JWS and JWE specifications; in particular, because JWE
   only supports the use of authenticated encryption algorithms,
   cryptographic concerns about the potential need to sign after
   encryption that apply in many contexts do not apply to this
   specification.





Looker                    Expires June 8, 2020                 [Page 16]

Internet-Draft                     jwm                     December 2019


11.  Privacy Considerations

   A JWM may contain privacy-sensitive information.  When this is the
   case, measures MUST be taken to prevent disclosure of this
   information to unintended parties.  One way to achieve this is to use
   an encrypted JWM and authenticate the recipient.  Another way is to
   ensure that JWMs containing unencrypted privacy-sensitive information
   are only transmitted using protocols utilizing encryption that
   support endpoint authentication, such as Transport Layer Security
   (TLS).  Omitting privacy-sensitive information from a JWM is the
   simplest way of minimizing privacy issues.

12.  Acknowledgements

   //TODO

13.  References

13.1.  Normative References

   [ECMAScript]
              Ecma International, "ECMAScript Language Specification,
              5.1 Edition", ECMA Standard 262, June 2011,
              <http://www.ecma-international.org/ecma-262/5.1/
              ECMA-262.pdf>.

   [IANA.MediaTypes]
              IANA, "Media Types",
              <http://www.iana.org/assignments/media-types>.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997, <https://www.rfc-
              editor.org/info/rfc2119>.

   [RFC7159]  Bray, T., Ed., "The JavaScript Object Notation (JSON) Data
              Interchange Format", RFC 7159, DOI 10.17487/RFC7159, March
              2014, <https://www.rfc-editor.org/info/rfc7159>.

   [RFC7515]  Jones, M., Bradley, J., and N. Sakimura, "JSON Web
              Signature (JWS)", RFC 7515, DOI 10.17487/RFC7515, May
              2015, <https://www.rfc-editor.org/info/rfc7515>.

   [RFC7516]  Jones, M. and J. Hildebrand, "JSON Web Encryption (JWE)",
              RFC 7516, DOI 10.17487/RFC7516, May 2015,
              <https://www.rfc-editor.org/info/rfc7516>.





Looker                    Expires June 8, 2020                 [Page 17]

Internet-Draft                     jwm                     December 2019


   [RFC7518]  Jones, M., "JSON Web Algorithms (JWA)", RFC 7518,
              DOI 10.17487/RFC7518, May 2015, <https://www.rfc-
              editor.org/info/rfc7518>.

   [RFC7519]  Jones, M., Bradley, J., and N. Sakimura, "JSON Web Token
              (JWT)", RFC 7519, DOI 10.17487/RFC7519, May 2015,
              <https://www.rfc-editor.org/info/rfc7519>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/info/rfc8174>.

13.2.  URIs

   [1] https://tools.ietf.org/html/rfc7519

Author's Address

   Tobias Looker (editor)
   Mattr

   Email: tobias.looker@mattr.global





























Looker                    Expires June 8, 2020                 [Page 18]
